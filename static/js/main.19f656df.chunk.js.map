{"version":3,"sources":["components/ControlPanel/ControlPanel.tsx","store/actions.tsx","components/Todos/Todo.tsx","components/Todos/Todos.tsx","components/Searching/Searching.tsx","App.tsx","reportWebVitals.ts","store/utilities.ts","index.tsx","store/reducers.tsx","components/Todos/todo.module.scss"],"names":["ControlPannel","useState","value","setValue","dispatch","useDispatch","placeholder","onChange","e","target","onKeyPress","key","type","payload","text","completed","todoCreate","confirm","Modal","Todo","connect","updateTodoState","id","todoComplete","removeTodoById","todoRemove","updateTodoText","todoUpdateText","editMode","setEditMode","listItemStyles","styles","listItem","filter","Boolean","join","Item","className","actions","shape","icon","EditOutlined","onClick","danger","DeleteOutlined","title","onOk","checked","data-testid","editTodo","Todos","todos","bordered","dataSource","renderItem","item","Search","Input","Searching","onSearch","allowClear","ToDoApp","styled","section","App","useSelector","state","setFilter","todo","indexOf","sort","todo1","todo2","Number","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","storeKey","store","createStore","combineReducers","action","lastId","length","concat","findTodo","find","map","serializedState","localStorage","getItem","JSON","parse","err","loadState","composeWithDevTools","applyMiddleware","thunk","subscribe","stringify","setItem","saveState","getState","ReactDOM","render","StrictMode","document","getElementById","module","exports"],"mappings":"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","file":"static/js/main.19f656df.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport { Input } from \"antd\";\nimport { useDispatch } from \"react-redux\";\nimport { todoCreate } from \"../../store/actions\";\n\nexport const ControlPannel: React.FC<{}> = () => {\n  const [value, setValue] = useState(\"\");\n  const dispatch = useDispatch();\n  return (\n    <div>\n      <Input\n        placeholder=\"Enter todo\"\n        value={value}\n        onChange={(e) => setValue(e.target.value)}\n        onKeyPress={(e) => {\n          if (e.key === \"Enter\") {\n            setValue(\"\");\n            dispatch(todoCreate(value));\n          }\n          if (e.key === \"Escape\") {\n            setValue(\"\");\n          }\n        }}\n      />\n    </div>\n  );\n};\n","import { todo } from \"../types/todo\";\n\nexport type todoCreateType = {\n  type: \"todo/add\";\n  payload: Omit<todo, \"id\">;\n};\nexport const todoCreate = (value: string): todoCreateType => ({\n  type: \"todo/add\",\n  payload: {\n    text: value,\n    completed: false,\n  },\n});\n\nexport type todoRemoveType = {\n  type: \"todo/delete\";\n  payload: number;\n};\nexport const todoRemove = (id: number): todoRemoveType => ({\n  type: \"todo/delete\",\n  payload: id,\n});\n\nexport type todoCompleteType = {\n  type: \"todo/complete\";\n  payload: {\n    id: number;\n    completed: boolean;\n  };\n};\nexport const todoComplete = (\n  id: number,\n  completed: boolean\n): todoCompleteType => ({\n  type: \"todo/complete\",\n  payload: { id, completed },\n});\n\nexport type todoUpdateTextType = {\n  type: \"todo/updateText\";\n  payload: {\n    id: number;\n    text: string;\n  };\n};\nexport const todoUpdateText = (\n  id: number,\n  text: string\n): todoUpdateTextType => ({\n  type: \"todo/updateText\",\n  payload: { id, text },\n});\n","import React, { useState } from \"react\";\nimport { Checkbox, List, Button, Input, Modal } from \"antd\";\nimport { DeleteOutlined, EditOutlined } from \"@ant-design/icons\";\nimport { connect } from \"react-redux\";\nimport styles from \"./todo.module.scss\";\nimport { todoRemove, todoUpdateText, todoComplete } from \"../../store/actions\";\n\nconst { confirm } = Modal;\n\ntype Props = {\n  id: number;\n  text: string;\n  completed: boolean;\n  updateTodoState: (id: number, completed: boolean) => void;\n  removeTodoById: (id: number) => void;\n  updateTodoText: (id: number, text: string) => void;\n};\n\nexport const TodoContainer: React.FC<Props> = ({\n  id,\n  text,\n  completed,\n  updateTodoState,\n  removeTodoById,\n  updateTodoText,\n}) => {\n  const [editMode, setEditMode] = useState(false);\n  const [value, setValue] = useState(text);\n  const listItemStyles = [styles.listItem, completed && styles.completed]\n    .filter(Boolean)\n    .join(\" \");\n  return (\n    <List.Item\n      className={listItemStyles}\n      actions={[\n        <Button\n          type=\"primary\"\n          shape=\"circle\"\n          icon={<EditOutlined />}\n          onClick={() => {\n            setEditMode(true);\n          }}\n        ></Button>,\n        <Button\n          type=\"primary\"\n          danger\n          icon={<DeleteOutlined />}\n          onClick={() => {\n            confirm({\n              title: \"Do you really want to remove the todo?\",\n              onOk() {\n                removeTodoById(id);\n              },\n            });\n          }}\n        ></Button>,\n      ]}\n    >\n      <Checkbox\n        checked={completed}\n        data-testid={`todo-checkbox-${id}`}\n        onChange={() => {\n          updateTodoState(id, !completed);\n        }}\n      >\n        {editMode ? (\n          <Input\n            className={styles.editTodo}\n            data-testid={`todo-input-${id}`}\n            value={value}\n            onChange={(e) => {\n              setValue(e.target.value);\n            }}\n            onKeyPress={(e) => {\n              if (e.key === \"Enter\") {\n                setEditMode(false);\n                updateTodoText(id, value);\n              }\n            }}\n          />\n        ) : (\n          text\n        )}\n      </Checkbox>\n    </List.Item>\n  );\n};\n\n// Could be implemented using react hooks useSelector and useDispatch\n// but decided to try an old approach\nconst mapDispatchToProps = (dispatch: Function) => {\n  return {\n    updateTodoState: (id: number, completed: boolean) => {\n      dispatch(todoComplete(id, completed));\n    },\n    removeTodoById: (id: number) => {\n      dispatch(todoRemove(id));\n    },\n    updateTodoText: (id: number, text: string) => {\n      dispatch(todoUpdateText(id, text));\n    },\n  };\n};\n\nexport const Todo = connect(null, mapDispatchToProps)(TodoContainer);\n","import React from \"react\";\nimport { List } from \"antd\";\nimport { Todo } from \"./Todo\";\nimport { todo } from \"../../types/todo\";\n\ntype Props = {\n  todos: Array<todo>;\n};\n\nexport const Todos: React.FC<Props> = ({ todos }) => {\n  return (\n    <List\n      bordered\n      dataSource={todos}\n      renderItem={(item) => (\n        <Todo id={item.id} text={item.text} completed={item.completed} />\n      )}\n    />\n  );\n};\n","import React, { useState } from \"react\";\nimport { Input } from \"antd\";\n\nconst { Search } = Input;\n\ntype Props = {\n  onSearch: (value: string) => void;\n};\nexport const Searching: React.FC<Props> = ({ onSearch }) => {\n  const [value, setValue] = useState(\"\");\n  return (\n    <section>\n      <Search\n        placeholder=\"Find todo\"\n        onSearch={onSearch}\n        allowClear\n        value={value}\n        onChange={(e) => setValue(e.target.value)}\n      />\n    </section>\n  );\n};\n","import React, { useState } from \"react\";\nimport styled from \"styled-components\";\nimport { useSelector } from \"react-redux\";\nimport \"antd/dist/antd.css\";\nimport { ControlPannel } from \"./components/ControlPanel\";\nimport { Todos } from \"./components/Todos\";\nimport { Searching } from \"./components/Searching\";\nimport { stateType } from \"./types/store\";\n\nconst ToDoApp = styled.section`\n  width: 400px;\n  margin: 20px auto;\n\n  @media (max-width: 640px) {\n    width: 90%;\n  }\n`;\n\nconst App: React.FC<{}> = () => {\n  const todos = useSelector<stateType, stateType[\"todos\"]>(\n    (state) => state.todos\n  );\n  const [filter, setFilter] = useState(\"\");\n\n  return (\n    <ToDoApp>\n      <ControlPannel />\n      <Searching\n        onSearch={(value) => {\n          setFilter(value);\n        }}\n      />\n      <Todos\n        todos={todos\n          .filter((todo) => todo.text.indexOf(filter) !== -1)\n          .sort(\n            (todo1, todo2) => Number(todo1.completed) - Number(todo2.completed)\n          )}\n      />\n    </ToDoApp>\n  );\n};\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);  \n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n}\n\nexport default reportWebVitals;\n","import { stateType } from \"../types/store\";\n\nconst storeKey = \"todos-state\";\n\nexport const loadState = () => {\n  try {\n    const serializedState = localStorage.getItem(storeKey);\n    if (serializedState === null) {\n      return undefined;\n    }\n    return JSON.parse(serializedState);\n  } catch (err) {\n    return undefined;\n  }\n};\n\nexport const saveState = (state: stateType) => {\n  try {\n    const serializedState = JSON.stringify(state);\n    localStorage.setItem(storeKey, serializedState);\n  } catch {\n    // ignore write errors\n  }\n};\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { createStore, applyMiddleware, combineReducers } from \"redux\";\nimport { Provider } from \"react-redux\";\nimport thunk from \"redux-thunk\";\nimport { composeWithDevTools } from \"redux-devtools-extension\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { todosReducer } from \"./store/reducers\";\nimport { loadState, saveState } from \"./store/utilities\";\n\nconst store = createStore(\n  combineReducers({\n    todos: todosReducer,\n  }),\n  loadState(),\n  composeWithDevTools(applyMiddleware(thunk))\n);\nstore.subscribe(() => saveState(store.getState()));\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","import { todo } from \"../types/todo\";\nimport {\n  todoCreateType,\n  todoRemoveType,\n  todoCompleteType,\n  todoUpdateTextType,\n} from \"./actions\";\n\nexport const todosReducer = (\n  state: Array<todo> = [],\n  action:\n    | todoCreateType\n    | todoRemoveType\n    | todoCompleteType\n    | todoUpdateTextType\n) => {\n  switch (action.type) {\n    case \"todo/add\": {\n      const lastId = state[state.length - 1]?.id ?? 0;\n      return state.concat({ ...action.payload, id: lastId + 1 });\n    }\n    case \"todo/delete\": {\n      return state.filter((todo) => todo.id !== action.payload);\n    }\n    case \"todo/complete\": {\n      const findTodo: todo = state.find(\n        (todo) => todo.id === action.payload.id\n      )!;\n      return state\n        .filter((todo) => todo.id !== action.payload.id)\n        .concat({\n          ...findTodo,\n          completed: action.payload.completed,\n        });\n    }\n    case \"todo/updateText\": {\n      return state.map((todo) => {\n        return todo.id === action.payload.id\n          ? { ...todo, text: action.payload.text }\n          : todo;\n      });\n    }\n    default:\n      return state;\n  }\n};\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"completed\":\"todo_completed__2wYws\",\"editTodo\":\"todo_editTodo__2fCiD\",\"listItem\":\"todo_listItem__G6c62\"};"],"sourceRoot":""}